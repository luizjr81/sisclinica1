from flask import Blueprint, render_template, request, jsonify, flash, redirect, url_for
from flask_login import login_required, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, DateField, TextAreaField, SubmitField, SelectField, BooleanField
from wtforms.validators import DataRequired, Length, Email
from models import db, Professional, Specialty, User
from datetime import datetime
import re

professionals_bp = Blueprint('professionals', __name__)

def validate_cpf(cpf):
    """Valida CPF brasileiro"""
    cpf = re.sub(r'[^0-9]', '', cpf)
    if len(cpf) != 11 or cpf == cpf[0] * 11:
        return False
    
    sum_1 = sum(int(cpf[i]) * (10 - i) for i in range(9))
    digit_1 = (sum_1 * 10 % 11) % 10
    
    sum_2 = sum(int(cpf[i]) * (11 - i) for i in range(10))
    digit_2 = (sum_2 * 10 % 11) % 10
    
    return cpf[-2:] == f'{digit_1}{digit_2}'

def format_cpf(cpf):
    """Formata CPF para o padrão 000.000.000-00"""
    cpf = re.sub(r'[^0-9]', '', cpf)
    if len(cpf) == 11:
        return f'{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}'
    return cpf

def format_phone(phone):
    """Formata telefone para o padrão (00) 00000-0000"""
    phone = re.sub(r'[^0-9]', '', phone)
    if len(phone) == 11:
        return f'({phone[:2]}) {phone[2:7]}-{phone[7:]}'
    elif len(phone) == 10:
        return f'({phone[:2]}) {phone[2:6]}-{phone[6:]}'
    return phone

# ===== ROTAS DE ESPECIALIDADES =====

@professionals_bp.route('/specialties')
@login_required
def list_specialties():
    if not current_user.has_permission('all'):
        flash('Acesso negado. Apenas administradores podem gerenciar especialidades.', 'error')
        return redirect(url_for('dashboard'))
    return render_template('specialties.html')

@professionals_bp.route('/api/specialties/list')
@login_required
def api_list_specialties():
    try:
        search = request.args.get('search', '').strip()
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 10, type=int), 100)
        
        query = Specialty.query
        if search:
            search_filter = f'%{search}%'
            query = query.filter(Specialty.name.ilike(search_filter))
        
        pagination = query.order_by(Specialty.name).paginate(
            page=page, per_page=per_page, error_out=False
        )
        
        return jsonify({
            'specialties': [s.to_dict() for s in pagination.items],
            'total': pagination.total,
            'pages': pagination.pages,
            'current_page': page,
            'per_page': per_page
        })
    except Exception as e:
        return jsonify({'error': f'Erro ao carregar especialidades: {str(e)}'}), 500

@professionals_bp.route('/api/specialties/create', methods=['POST'])
@login_required
def api_create_specialty():
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        data = request.get_json()
        if not data or not data.get('name') or len(data['name'].strip()) < 3:
            return jsonify({'error': 'Nome da especialidade deve ter pelo menos 3 caracteres'}), 400
        
        if Specialty.query.filter_by(name=data['name'].strip()).first():
            return jsonify({'error': 'Especialidade já cadastrada'}), 400
        
        specialty = Specialty(
            name=data['name'].strip(),
            description=data.get('description', '').strip(),
            is_active=data.get('is_active', True)
        )
        
        db.session.add(specialty)
        db.session.commit()
        
        return jsonify({
            'message': 'Especialidade cadastrada com sucesso',
            'specialty': specialty.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@professionals_bp.route('/api/specialties/<int:specialty_id>', methods=['GET'])
@login_required
def api_get_specialty(specialty_id):
    try:
        specialty = Specialty.query.get_or_404(specialty_id)
        return jsonify(specialty.to_dict())
    except Exception as e:
        return jsonify({'error': f'Erro ao carregar especialidade: {str(e)}'}), 500

@professionals_bp.route('/api/specialties/<int:specialty_id>', methods=['PUT'])
@login_required
def api_update_specialty(specialty_id):
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        specialty = Specialty.query.get_or_404(specialty_id)
        data = request.get_json()
        
        if not data or not data.get('name') or len(data['name'].strip()) < 3:
            return jsonify({'error': 'Nome da especialidade deve ter pelo menos 3 caracteres'}), 400
        
        existing = Specialty.query.filter(
            Specialty.name == data['name'].strip(),
            Specialty.id != specialty_id
        ).first()
        
        if existing:
            return jsonify({'error': 'Especialidade já cadastrada'}), 400
        
        specialty.name = data['name'].strip()
        specialty.description = data.get('description', '').strip()
        specialty.is_active = data.get('is_active', True)
        
        db.session.commit()
        
        return jsonify({
            'message': 'Especialidade atualizada com sucesso',
            'specialty': specialty.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao atualizar especialidade: {str(e)}'}), 500

@professionals_bp.route('/api/specialties/<int:specialty_id>', methods=['DELETE'])
@login_required
def api_delete_specialty(specialty_id):
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        specialty = Specialty.query.get_or_404(specialty_id)
        
        if specialty.professionals:
            return jsonify({'error': 'Não é possível excluir especialidade com profissionais vinculados'}), 400
        
        db.session.delete(specialty)
        db.session.commit()
        
        return jsonify({'message': 'Especialidade excluída com sucesso'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao excluir especialidade: {str(e)}'}), 500

# ===== ROTAS DE PROFISSIONAIS =====

@professionals_bp.route('/')
@login_required
def list_professionals():
    if not current_user.has_permission('all'):
        flash('Acesso negado.', 'error')
        return redirect(url_for('dashboard'))
    return render_template('professionals.html')

@professionals_bp.route('/api/list')
@login_required
def api_list_professionals():
    try:
        search = request.args.get('search', '').strip()
        page = request.args.get('page', 1, type=int)
        per_page = min(request.args.get('per_page', 10, type=int), 100)
        
        query = Professional.query.join(Specialty)
        
        if search:
            search_filter = f'%{search}%'
            query = query.filter(
                db.or_(
                    Professional.full_name.ilike(search_filter),
                    Professional.cpf.like(search_filter),
                    Professional.crm_crf.ilike(search_filter),
                    Professional.email.ilike(search_filter),
                    Specialty.name.ilike(search_filter)
                )
            )
        
        pagination = query.order_by(Professional.full_name).paginate(
            page=page, per_page=per_page, error_out=False
        )
        
        return jsonify({
            'professionals': [p.to_dict() for p in pagination.items],
            'total': pagination.total,
            'pages': pagination.pages,
            'current_page': page,
            'per_page': per_page
        })
    except Exception as e:
        return jsonify({'error': f'Erro ao carregar profissionais: {str(e)}'}), 500

@professionals_bp.route('/api/create', methods=['POST'])
@login_required
def api_create_professional():
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'Dados não recebidos'}), 400
        
        # Validações
        required_fields = ['full_name', 'cpf', 'crm_crf', 'phone', 'email', 'specialty_id']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'Campo {field} é obrigatório'}), 400
        
        cpf_formatted = format_cpf(data['cpf'])
        if not validate_cpf(cpf_formatted):
            return jsonify({'error': 'CPF inválido'}), 400
        
        if Professional.query.filter_by(cpf=cpf_formatted).first():
            return jsonify({'error': 'CPF já cadastrado'}), 400
        
        if Professional.query.filter_by(email=data['email']).first():
            return jsonify({'error': 'Email já cadastrado'}), 400
        
        if Professional.query.filter_by(crm_crf=data['crm_crf']).first():
            return jsonify({'error': 'CRM/CRF já cadastrado'}), 400
        
        specialty = Specialty.query.get(data['specialty_id'])
        if not specialty:
            return jsonify({'error': 'Especialidade não encontrada'}), 400
        
        phone_formatted = format_phone(data['phone'])
        
        birth_date = None
        if data.get('birth_date'):
            try:
                birth_date = datetime.strptime(data['birth_date'], '%Y-%m-%d').date()
            except ValueError:
                return jsonify({'error': 'Data de nascimento inválida'}), 400
        
        professional = Professional(
            full_name=data['full_name'].strip(),
            cpf=cpf_formatted,
            crm_crf=data['crm_crf'].strip().upper(),
            phone=phone_formatted,
            email=data['email'].strip().lower(),
            birth_date=birth_date,
            bio=data.get('bio', '').strip(),
            specialty_id=data['specialty_id'],
            is_active=data.get('is_active', True),
            created_by=current_user.id
        )
        
        db.session.add(professional)
        db.session.commit()
        
        return jsonify({
            'message': 'Profissional cadastrado com sucesso',
            'professional': professional.to_dict()
        }), 201
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@professionals_bp.route('/api/<int:professional_id>', methods=['GET'])
@login_required
def api_get_professional(professional_id):
    try:
        professional = Professional.query.get_or_404(professional_id)
        return jsonify(professional.to_dict())
    except Exception as e:
        return jsonify({'error': f'Erro ao carregar profissional: {str(e)}'}), 500

@professionals_bp.route('/api/<int:professional_id>', methods=['PUT'])
@login_required
def api_update_professional(professional_id):
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        professional = Professional.query.get_or_404(professional_id)
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Dados não recebidos'}), 400
        
        # Validações (similar ao create, mas verificando duplicatas exceto o próprio registro)
        required_fields = ['full_name', 'cpf', 'crm_crf', 'phone', 'email', 'specialty_id']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'Campo {field} é obrigatório'}), 400
        
        cpf_formatted = format_cpf(data['cpf'])
        if not validate_cpf(cpf_formatted):
            return jsonify({'error': 'CPF inválido'}), 400
        
        # Verificar duplicatas
        for field, value in [('cpf', cpf_formatted), ('email', data['email']), ('crm_crf', data['crm_crf'])]:
            existing = Professional.query.filter(
                getattr(Professional, field) == value,
                Professional.id != professional_id
            ).first()
            if existing:
                return jsonify({'error': f'{field.upper()} já cadastrado para outro profissional'}), 400
        
        specialty = Specialty.query.get(data['specialty_id'])
        if not specialty:
            return jsonify({'error': 'Especialidade não encontrada'}), 400
        
        phone_formatted = format_phone(data['phone'])
        
        birth_date = None
        if data.get('birth_date'):
            try:
                birth_date = datetime.strptime(data['birth_date'], '%Y-%m-%d').date()
            except ValueError:
                return jsonify({'error': 'Data de nascimento inválida'}), 400
        
        # Atualizar
        professional.full_name = data['full_name'].strip()
        professional.cpf = cpf_formatted
        professional.crm_crf = data['crm_crf'].strip().upper()
        professional.phone = phone_formatted
        professional.email = data['email'].strip().lower()
        professional.birth_date = birth_date
        professional.bio = data.get('bio', '').strip()
        professional.specialty_id = data['specialty_id']
        professional.is_active = data.get('is_active', True)
        professional.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'message': 'Profissional atualizado com sucesso',
            'professional': professional.to_dict()
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao atualizar profissional: {str(e)}'}), 500

@professionals_bp.route('/api/<int:professional_id>', methods=['DELETE'])
@login_required
def api_delete_professional(professional_id):
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        professional = Professional.query.get_or_404(professional_id)
        
        if professional.user_account:
            db.session.delete(professional.user_account)
        
        db.session.delete(professional)
        db.session.commit()
        
        return jsonify({'message': 'Profissional excluído com sucesso'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao excluir profissional: {str(e)}'}), 500

# ===== GESTÃO DE CONTAS =====

@professionals_bp.route('/api/<int:professional_id>/create-account', methods=['POST'])
@login_required
def api_create_user_account(professional_id):
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        professional = Professional.query.get_or_404(professional_id)
        
        if professional.user_account:
            return jsonify({'error': 'Profissional já possui conta de usuário'}), 400
        
        data = request.get_json()
        username = data.get('username')
        password = data.get('password')
        
        if not username or not password:
            return jsonify({'error': 'Username e senha são obrigatórios'}), 400
        
        if User.query.filter_by(username=username).first():
            return jsonify({'error': 'Username já existe'}), 400
        
        user = User(
            username=username,
            email=professional.email,
            full_name=professional.full_name,
            role='professional',
            professional_id=professional.id
        )
        user.set_password(password)
        
        db.session.add(user)
        db.session.commit()
        
        return jsonify({
            'message': 'Conta de usuário criada com sucesso',
            'username': username
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao criar conta: {str(e)}'}), 500

@professionals_bp.route('/api/<int:professional_id>/reset-password', methods=['POST'])
@login_required
def api_reset_password(professional_id):
    if not current_user.has_permission('all'):
        return jsonify({'error': 'Acesso negado'}), 403
    
    try:
        professional = Professional.query.get_or_404(professional_id)
        
        if not professional.user_account:
            return jsonify({'error': 'Profissional não possui conta de usuário'}), 400
        
        data = request.get_json()
        new_password = data.get('password')
        
        if not new_password:
            return jsonify({'error': 'Nova senha é obrigatória'}), 400
        
        professional.user_account.set_password(new_password)
        db.session.commit()
        
        return jsonify({'message': 'Senha alterada com sucesso'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao alterar senha: {str(e)}'}), 500

# ===== AUXILIARES =====

@professionals_bp.route('/api/specialties/options')
@login_required
def api_specialties_options():
    """Retorna especialidades ativas para uso em selects"""
    try:
        specialties = Specialty.query.filter_by(is_active=True).order_by(Specialty.name).all()
        return jsonify([{
            'id': s.id,
            'name': s.name
        } for s in specialties])
    except Exception as e:
        return jsonify({'error': f'Erro ao carregar especialidades: {str(e)}'}), 500
